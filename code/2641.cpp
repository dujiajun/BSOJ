#include<iostream>
#include<cmath>
using namespace std;
const int mark[10][10]={
{0,0,0,0,0,0,0,0,0,0,},
{0,6,6,6,6,6,6,6,6,6,},
{0,6,7,7,7,7,7,7,7,6,},
{0,6,7,8,8,8,8,8,7,6,},
{0,6,7,8,9,9,9,8,7,6,},
{0,6,7,8,9,10,9,8,7,6,},
{0,6,7,8,9,9,9,8,7,6,},
{0,6,7,8,8,8,8,8,7,6,},
{0,6,7,7,7,7,7,7,7,6,},
{0,6,6,6,6,6,6,6,6,6,},
},tp[10][10]={
{0,0,0,0,0,0,0,0,0,0,},
{0,1,1,1,2,2,2,3,3,3,},
{0,1,1,1,2,2,2,3,3,3,},
{0,1,1,1,2,2,2,3,3,3,},
{0,4,4,4,5,5,5,6,6,6,},
{0,4,4,4,5,5,5,6,6,6,},
{0,4,4,4,5,5,5,6,6,6,},
{0,7,7,7,8,8,8,9,9,9,},
{0,7,7,7,8,8,8,9,9,9,},
{0,7,7,7,8,8,8,9,9,9,},
};
int a[10][10],ans=0,r[10]={0},c[10]={0},b[10]={0},bl[10]={0},rk[10]={0,1,2,3,4,5,6,7,8,9};
void cal()
{
	int t=0;
	for(int i=1;i<=9;i++)
	for(int j=1;j<=9;j++)t+=a[i][j]*mark[i][j];
	ans=max(ans,t);
}
void dfs(int x,int y)
{
	if(x==9&&y==10){cal();return;}
	if(y==10){x++;y=1;}
	if(a[rk[x]][y]){dfs(x,y+1);return;}
	int p=0x1ff&(~(r[rk[x]]|c[y]|b[tp[rk[x]][y]])),p2;
	while(p)
	{
		p2=p&(-p);
		p-=p2;
		a[rk[x]][y]=log2(p2)+1;
		r[rk[x]]+=p2;c[y]+=p2;b[tp[rk[x]][y]]+=p2;
		dfs(x,y+1);
		r[rk[x]]-=p2;c[y]-=p2;b[tp[rk[x]][y]]-=p2;
	}
	a[rk[x]][y]=0;
}
int main()
{
	for(int i=1;i<=9;i++)
	for(int j=1;j<=9;j++)
	{
		cin>>a[i][j];
		if(a[i][j])
		{
			int p=1<<(a[i][j]-1);
			if((r[i]&p)|(c[j]&p)|(b[tp[i][j]]&p)){cout<<-1<<endl;return 0;}
			r[i]+=p;c[j]+=p;b[tp[i][j]]+=p;
			bl[i]++;
		}
	}
	for(int i=1;i<=8;i++)
	for(int j=i+1;j<=9;j++)
	if(bl[i]<bl[j])
	{
		swap(bl[i],bl[j]);
		swap(rk[i],rk[j]);
	}
	dfs(1,1);
	if(ans)cout<<ans;
	else cout<<-1<<endl;
	return 0;
}
/*
7 0 0 9 0 0 0 0 1
1 0 0 0 0 5 9 0 0
0 0 0 2 0 0 0 8 0
0 0 5 0 2 0 0 0 3
0 0 0 0 0 0 6 4 8
4 1 3 0 0 0 0 0 0
0 0 7 0 0 2 0 9 0
2 0 1 0 6 0 8 0 4
0 8 0 5 0 4 0 1 2
*/